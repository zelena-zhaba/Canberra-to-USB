;PIO program that handles input from the canberra ADC

;Input pins
.define BASE_PIN 2               ; ADC base pin is GP02
.define ADC_COUNT 14             ; ADC are pins GP02-GP15
.define CDT 16                   ; Composite dead time GP16
.define READY 17                 ; Ready signal from the ADC GP17
.define INB 18                   ; Discard data if LOW GP18

;Output pins
.define ACEPT 19                 ; Confirm that data was recieved GP19
.define ENDATA 20                ; Open the gates to read the data GP20
.define ENC 21                   ; Enables the ADC if LOW GP21
.define OE 22                    ; Enables HW221 level shifter if LOW GP22


.program input

.wrap_target
   wait 0 pin, READY    [25]  ; Wait for trigger and then 200ns 
   in pins, ADC_COUNT   [0]   ; Shift data from data pins into ISR; autopush will move to FIFO
   wait 1 pin, READY    [0]   ;
.wrap               


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void input_program_init(PIO pio, 
                        uint sm, 
                        uint offset, 
                        uint adc_base_pin,
                        uint ready_pin
                        ) 
{
   
   // Configure adc data input pins
   for (uint pin = adc_base_pin; pin < adc_base_pin + 14; pin++) {
        pio_gpio_init(pio, pin);
        gpio_set_dir(pin, false);  // Set as input
        gpio_set_pulls(pin, false, false);  // Disable pulls
    }

   // Configure ready pin
    pio_gpio_init(pio, ready_pin);

   // Load default configuration
   pio_sm_config c = input_program_get_default_config(offset);

   // Map IN command to ADC input pins
   sm_config_set_in_pins(&c, adc_base_pin);

   // Make WAIT/IRQ use the READY pin
   sm_config_set_jmp_pin(&c, ready_pin);

   // Enable autopush when ADC_COUNT bits have been shifted in.
   // shift_right=true (adjust if your ADC bit order is MSB-first)
   sm_config_set_in_shift(&c, true, true, 14);

   // Set clock divider (adjust based on ADC timing)
   sm_config_set_clkdiv(&c, 1.0f);

   // Joining my FIFOs into one gigachad FIFO
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
   
   // Initialize state machine
   pio_sm_init(pio, sm, offset, &c);

   // Start state machine
   pio_sm_set_enabled(pio, sm, true);
}
%}